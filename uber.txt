import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from scipy import stats


data  = pd.read_csv("D:\\Dataset\\uber.csv")

# Check for missing values
print(data.isnull().sum())

# Fill or drop missing values (example: dropping rows with missing prices)
data = data.dropna(subset=['price'])

# Convert categorical variables to numerical if necessary (e.g., using one-hot encoding)
data = pd.get_dummies(data, columns=['pickup_location', 'dropoff_location'], drop_first=True)




# Using Z-score method to identify outliers
z_scores = np.abs(stats.zscore(data['price']))
data = data[(z_scores < 3)]  # Keep only those rows with Z-score less than 3



# Check correlation between features and target variable (price)
correlation_matrix = data.corr()
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.show()




# Split the dataset into features and target variable
X = data.drop('price', axis=1)  # Features
y = data['price']                # Target

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and fit the linear regression model
model = LinearRegression()      RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)



# Predict on the test set
y_pred = model.predict(X_test)

# Calculate evaluation metrics
r2 = r2_score(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

print(f'R^2 Score: {r2}')
print(f'RMSE: {rmse}')
